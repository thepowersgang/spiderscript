/*
 * Acess2 - SpiderScript
 * - Script Exports (Lang. Namespace)
 */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <spiderscript.h>
#include <ctype.h>	// isblank

@FUNCTION Integer len( * Value )
@{
	if( SS_GETARRAYDEPTH( @TYPEOF(Value) ) )
	{
		if( !Value )	@RETURN 0;
		@RETURN @ARRAY(Value)->Length;
	}

	if( SS_ISTYPEOBJECT( @TYPEOF(Value) ) )
	{
		// TODO: Call an operator overload?
		@RETURN 0;
	}	

	if( SS_ISCORETYPE(@TYPEOF(Value), SS_DATATYPE_STRING) )
	{
		if( !Value )	@RETURN 0;
		@RETURN @STRING(Value)->Length;
	}

	// Actually an invalid operation	
	@RETURN 0;
@}

@FUNCTION Integer sizeof( * Value )
@{
	return Exports_fcn_len(Script, RetData, NArgs, ArgTypes, Args);
@}

@FUNCTION void exit()
@{
	return SpiderScript_ThrowException_ForceExit(Script, 0);
@}

@FUNCTION Boolean isnull( * Value )
@{
	if( !Value )
		@RETURN 1;
	@RETURN 0;
@}

@NAMESPACE Lang
@{

int compare_spiderstring_ptrs(const void *s1, const void *s2)
{
	const tSpiderString	* const *strp1 = s1, * const *strp2 = s2;

	if( !*strp1 && !*strp2 )
		return 0;
	else if( !*strp1 )
		return 1;	// NULL sorts to the end
	else if( !*strp2 )
		return -1;
	else
		return SpiderScript_StringCompare(*strp1, *strp2);
}

@FUNCTION String[] SortStrings(String[] Input)
@{
	if( !Input )
		@RETURN NULL;
	
	tSpiderArray	*ret = SpiderScript_CreateArray(@TYPE(String), Input->Length);
	for( int i = 0; i < Input->Length; i ++ ) {
		ret->Strings[i] = Input->Strings[i];
		if( ret->Strings[i] )
			SpiderScript_ReferenceString(ret->Strings[i]);
	}
	qsort(ret->Strings, ret->Length, sizeof(ret->Strings[0]), compare_spiderstring_ptrs);
	@RETURN ret;
@}

@NAMESPACE Strings
@{

// Because memmem is a GNU extension, I'll just impliment it myself
const void *memmem(const void *haystack, size_t haystacklen, const void *needle, size_t needlelen)
{
	 int	ofs;
	if( haystacklen < needlelen )
		return NULL;
	for( ofs = 0; ofs < haystacklen - needlelen; ofs ++ )
	{
		if( memcmp(haystack + ofs, needle, needlelen) == 0 )
			return haystack + ofs;
	}
	return NULL;
}

@FUNCTION String[] Split(String Haystack, String Needle)
@{
	if( !Haystack )	return SpiderScript_ThrowException_NullRef(Script, "Lang.Strings.Split - Haystack");
	if( !Needle )	return SpiderScript_ThrowException_NullRef(Script, "Lang.Strings.Split - Needle");
	
	 int	haystack_len, needle_len;
	const void	*haystack, *needle, *end;
	 int	ofs, slen;
	tSpiderString	**strings = NULL;
	 int	nSubStrs = 0;
	
	// Split the string
	haystack_len = Haystack->Length;
	haystack     = Haystack->Data;
	needle_len = Needle->Length;
	needle     = Needle->Data;
	ofs = 0;
	do {
		end = memmem(haystack + ofs, haystack_len - ofs, needle, needle_len);
		if( end )
			slen = end - (haystack + ofs);
		else
			slen = haystack_len - ofs;
		
		strings = realloc(strings, (nSubStrs+1)*sizeof(tSpiderString*));
		strings[nSubStrs] = SpiderScript_CreateString(slen, haystack + ofs);
		nSubStrs ++;

		ofs += slen + needle_len;
	} while(end);

	// Create output array
	tSpiderArray *ret = SpiderScript_CreateArray(@TYPEOF(Haystack), nSubStrs);
	memcpy(ret->Strings, strings, nSubStrs*sizeof(tSpiderString*));
	free(strings);

	@RETURN ret;
@}

@FUNCTION String Join(String[] Array, String Joiner)
@{
	if( !Array ) {
		return SpiderScript_ThrowException_NullRef(Script, "Join - Input array NULL");
	}
	if( !Joiner ) {
		return SpiderScript_ThrowException_NullRef(Script, "Join - Joiner NULL");
	}
	
	if( Array->Length == 0 ) {
		@RETURN SpiderScript_CreateString(0, "");
	}

	if( !Array->Strings[0] ) {
		return SpiderScript_ThrowException_NullRef(Script, "Join - Array[0] NULL");
	}
	
	size_t	len = Array->Strings[0]->Length;
	for( unsigned int i = 1; i < Array->Length; i ++ )
	{
		if( !Array->Strings[i] )
			return SpiderScript_ThrowException_NullRef(Script, "Join - Array[i]");
		len += Joiner->Length + Array->Strings[i]->Length;
	}
	
	tSpiderString	*ret = SpiderScript_CreateString(len, NULL);
	size_t	ofs = Array->Strings[0]->Length;
	memcpy(ret->Data, Array->Strings[0]->Data, Array->Strings[0]->Length);
	for( unsigned int i = 1; i < Array->Length; i ++ )
	{
		memcpy(ret->Data + ofs, Joiner->Data, Joiner->Length);
		ofs += Joiner->Length;
		memcpy(ret->Data + ofs, Array->Strings[i]->Data, Array->Strings[i]->Length);
		ofs += Array->Strings[i]->Length;
	}

	@RETURN ret;
@}

@FUNCTION Integer Search(String Haystack, String Needle)
@{
	if( !Haystack || !Needle )
		@RETURN -1;
	
	const char *end = memmem(Haystack->Data, Haystack->Length, Needle->Data, Needle->Length);
	if( !end )
		@RETURN -1;
	
	@RETURN end - Haystack->Data;
@}

@FUNCTION String SubStr(String Input, Integer Offset, Integer Length)
@{
	if( !Input )
		@RETURN NULL;
	if( Offset > Input->Length )
		@RETURN SpiderScript_CreateString(0, NULL);
	if( Length > Input->Length )
		Length = Input->Length;
	if( Offset + Length > Input->Length )
		Length = Input->Length - Offset;
	if( Length == 0 )
		@RETURN SpiderScript_CreateString(0, NULL);
	
	@RETURN SpiderScript_CreateString(Length, Input->Data + Offset);
@}

@FUNCTION String Replace(String Haystack, String Needle, String Replacement)
@{
	if( !Haystack )
		@RETURN NULL;
	if( !Needle || !Replacement ) {
		SpiderScript_ReferenceString(Haystack);
		@RETURN Haystack;
	}

	// Pass 1 - Count replacements
	const char *pos;
	 int	ofs = 0;
	 int	nMatches = 0;
	 int	slen;
	do {
		pos = memmem(Haystack->Data + ofs, Haystack->Length - ofs, Needle->Data, Needle->Length);
		if( pos )
			slen = pos - (Haystack->Data + ofs);
		else
			slen = Haystack->Length - ofs;

		if( pos )
			nMatches ++;	

		ofs += slen + Needle->Length;
	} while(pos);

	// Pass 2 - Build new string
	size_t	newlen = Haystack->Length - nMatches*Needle->Length + nMatches*Replacement->Length;
	tSpiderString *ret = SpiderScript_CreateString(newlen, NULL);
	 int	write_ofs = 0;
	ofs = 0;
	do {
		pos = memmem(Haystack->Data + ofs, Haystack->Length - ofs, Needle->Data, Needle->Length);
		if( pos )
			slen = pos - (Haystack->Data + ofs);
		else
			slen = Haystack->Length - ofs;

		memcpy(ret->Data + write_ofs, Haystack->Data + ofs, slen);
		write_ofs += slen;
		if( pos ) {
			memcpy(ret->Data + write_ofs, Replacement->Data, Replacement->Length);
			write_ofs += Replacement->Length;
		}

		ofs += slen + Needle->Length;
	} while(pos);
	
	@RETURN ret;
@}

@FUNCTION String Trim(String Input)
@{
	if( !Input )	@RETURN NULL;
	const char *base = Input->Data;
	size_t	len = Input->Length;
	while( len > 0 && isblank(*base) )
		base ++, len --;
	
	while( len > 0 && isblank(base[len-1]) )
		len --;
	
	@RETURN SpiderScript_CreateString(len, base);
@}

// TODO: RegexReplace

@} // NAMESPACE Strings

@} // NAMESPACE Lang

// vim: ft=c
