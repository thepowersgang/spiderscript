/*
 * Acess2 - SpiderScript
 * - Script Exports (Lang. Namespace)
 */
#define _GNU_SOURCE	// HACK!
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <spiderscript.h>

@FUNCTION Integer sizeof( * Value )
@{
	if( SS_GETARRAYDEPTH( @TYPEOF(Value) ) )
	{
		@RETURN @ARRAY(Value)->Length;
	}

	if( SS_ISTYPEOBJECT( @TYPEOF(Value) ) )
	{
		@RETURN 0;
	}	

	switch( @TYPEOF(Value) )
	{
	case SS_DATATYPE_STRING:
		@RETURN @STRING(Value)->Length;
	default:
		@RETURN 0;
	}
@}

@NAMESPACE Lang
@{

@CLASS StringMap
@{
	typedef struct s_StringMap_Entry	t_StringMap_Entry;
	struct s_StringMap_Entry
	{
		t_StringMap_Entry	*Next;
		const tSpiderString	*Key;
		const tSpiderString	*Value;
	};
	#define N_STRINGMAP_BUCKETS	256
	typedef struct
	{
		t_StringMap_Entry	*Buckets[N_STRINGMAP_BUCKETS];
	} t_StringMap_Info;
	@CONSTRUCTOR ()
	@{
		tSpiderObject	*this;

		this = SpiderScript_AllocateObject(Script, @CLASSPTR, sizeof(t_StringMap_Info));		

		t_StringMap_Info *info = this->OpaqueData;
		memset(info->Buckets, 0, sizeof(info->Buckets));
		
		@RETURN this;
	@}
	@DESTRUCTOR
	@{
		t_StringMap_Info *info = this->OpaqueData;
		for( int i = 0; i < N_STRINGMAP_BUCKETS; i ++ )
		{
			t_StringMap_Entry	*e, *p;
			
			for( e = info->Buckets[i]; e; e = p )
			{
				p = e->Next;
				SpiderScript_DereferenceString(e->Key);
				SpiderScript_DereferenceString(e->Value);
				free(e);
			}
		}
	@}

	@FUNCTION void set(String Key, String Value)
	@{
		t_StringMap_Info *info = this->OpaqueData;
		if( !Key )	@RETURN ;

		t_StringMap_Entry	**bucket;
		if( Key->Length == 0 )
			bucket = &info->Buckets[0];
		else
			bucket = &info->Buckets[ (int)Key->Data[0] ];
		
		t_StringMap_Entry	*e, *p = NULL;
		for( e = *bucket; e; p = e, e = e->Next )
		{
			// Length sorted
			if( e->Key->Length > Key->Length )	break;
			if( e->Key->Length < Key->Length )	continue;
			// Data sorted
			int cmp = memcmp(e->Key->Data, Key->Data, Key->Length);
			if( cmp > 0 )	break;
			if( cmp < 0 )	continue ;
			
			// Ok, just update this then
			SpiderScript_DereferenceString(e->Value);
			SpiderScript_ReferenceString(Value);
			e->Value = Value;
			@RETURN ;
		}
		
		e = malloc(sizeof(*e));
		SpiderScript_ReferenceString(Key);
		e->Key = Key;
		SpiderScript_ReferenceString(Value);
		e->Value = Value;
		if( p ) {
			e->Next = p->Next;
			p->Next = e;
		}
		else {
			e->Next = *bucket;
			*bucket = e;
		}
	@}

	@FUNCTION String get(String Key)
	@{
		t_StringMap_Info *info = this->OpaqueData;
		if( !Key )	@RETURN NULL;

		t_StringMap_Entry	**bucket;
		if( Key->Length == 0 )
			bucket = &info->Buckets[0];
		else
			bucket = &info->Buckets[ (int)Key->Data[0] ];

		t_StringMap_Entry	*e;
		for( e = *bucket; e; e = e->Next )
		{
			// Length sorted
			if( e->Key->Length > Key->Length )	break;
			if( e->Key->Length < Key->Length )	continue;
			// Data sorted
			int cmp = memcmp(e->Key->Data, Key->Data, Key->Length);
			if( cmp > 0 )	break;
			if( cmp < 0 )	continue ;
			
			// Ok, just update this then
			SpiderScript_ReferenceString(e->Value);
			@RETURN e->Value;
		}
		@RETURN NULL;
	@}

@}

@NAMESPACE Strings
@{

@FUNCTION String[] Split(String Haystack, String Needle)
@{
	 int	haystack_len, needle_len;
	const void	*haystack, *needle, *end;
	 int	ofs, slen;
	tSpiderString	**strings = NULL;
	 int	nSubStrs = 0;
	
	// Split the string
	haystack_len = Haystack->Length;
	haystack     = Haystack->Data;
	needle_len = Needle->Length;
	needle     = Needle->Data;
	ofs = 0;
	do {
		end = memmem(haystack + ofs, haystack_len - ofs, needle, needle_len);
		if( end )
			slen = end - (haystack + ofs);
		else
			slen = haystack_len - ofs;
		
		strings = realloc(strings, (nSubStrs+1)*sizeof(tSpiderString*));
		strings[nSubStrs] = SpiderScript_CreateString(slen, haystack + ofs);
		nSubStrs ++;

		ofs += slen + needle_len;
	} while(end);

	// Create output array
	tSpiderArray *ret = SpiderScript_CreateArray(SS_DATATYPE_STRING, nSubStrs);
	memcpy(ret->Strings, strings, nSubStrs*sizeof(tSpiderString*));
	free(strings);

	@RETURN ret;
@}

@} // NAMESPACE Strings	
@} // NAMESPACE Lang

// vim: ft=c
